import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchAllProducts} from './productListsAPI';
import { fetchProductsByFilters } from './productListsAPI';
import { fetchFromSorting } from './productListsAPI';
const initialState = {
  products:[],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllProductsAsync = createAsyncThunk(
  'product/fetchAllProducts',
  async () => {
    const response = await fetchAllProducts();
    // The value we return becomes the `fulfilled` action payload
    // console.log("inside fetchAsync",response.data.products);
    const finalData=response.data
    // console.log("finalData",finalData);
    return finalData;
  }
);
export const fetchProductsByfilterAsync = createAsyncThunk(
  'product/fetchProductsByFilter',
  async (filter) => {
    const response = await fetchProductsByFilters(filter);
    // The value we return becomes the `fulfilled` action payload
    // console.log("inside fetchAsync",response.data.products);
    const finalData=response.data
    // console.log("finalData",finalData);
    return finalData;
  }
);
export const fetchFromSortingAsync = createAsyncThunk(
  'product/fetchFromSorting',
  async (option) => {
    const response = await fetchFromSorting(option);
    // The value we return becomes the `fulfilled` action payload
    // console.log("inside fetchAsync",response.data.products);
    const finalData=response.data
    // console.log("finalData",finalData);
    return finalData;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // console.log("action.payload: ", action.payload);
        state.products = action.payload;
        // console.log(state.products);
      })
      .addCase(fetchProductsByfilterAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProductsByfilterAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // console.log("action.payload: ", action.payload);
        state.products = action.payload;
        // console.log(state.products);
      })
      .addCase(fetchFromSortingAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchFromSortingAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // console.log("action.payload: ", action.payload);
        state.products = action.payload;
        // console.log(state.products);
      });
  },
});

export const { increment} = productSlice.actions;


export const selectAllProducts = (state) => state.product.products;

export default productSlice.reducer;
